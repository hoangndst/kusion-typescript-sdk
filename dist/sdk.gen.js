"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceService = exports.StackService = exports.SourceService = exports.RunService = exports.ResourceService = exports.ProjectService = exports.OrganizationService = exports.ModuleService = exports.DebugService = exports.BackendService = exports.client = void 0;
const client_fetch_1 = require("@hey-api/client-fetch");
exports.client = (0, client_fetch_1.createClient)((0, client_fetch_1.createConfig)());
class BackendService {
    /**
     * List backends
     * List all backends
     */
    static listBackend(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/backends",
        });
    }
    /**
     * Create backend
     * Create a new backend
     */
    static createBackend(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/backends",
        });
    }
    /**
     * Delete backend
     * Delete specified backend by ID
     */
    static deleteBackend(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/backends/{id}",
        });
    }
    /**
     * Get backend
     * Get backend information by backend ID
     */
    static getBackend(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/backends/{id}",
        });
    }
    /**
     * Update backend
     * Update the specified backend
     */
    static updateBackend(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/backends/{id}",
        });
    }
}
exports.BackendService = BackendService;
class DebugService {
    /**
     * List all available endpoints
     * List all registered endpoints in the router
     */
    static getEndpoints(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/endpoints",
        });
    }
}
exports.DebugService = DebugService;
class ModuleService {
    /**
     * List module
     * List module information
     */
    static listModule(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/modules",
        });
    }
    /**
     * Create module
     * Create a new Kusion module
     */
    static createModule(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/modules",
        });
    }
    /**
     * Delete module
     * Delete the specified module by name
     */
    static deleteModule(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/modules/{name}",
        });
    }
    /**
     * Get module
     * Get module information by module name
     */
    static getModule(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/modules/{name}",
        });
    }
    /**
     * Update module
     * Update the specified module
     */
    static updateModule(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/modules/{name}",
        });
    }
}
exports.ModuleService = ModuleService;
class OrganizationService {
    /**
     * List organizations
     * List all organizations
     */
    static listOrganization(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/orgs",
        });
    }
    /**
     * Create organization
     * Create a new organization
     */
    static createOrganization(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/orgs",
        });
    }
    /**
     * Delete organization
     * Delete specified organization by ID
     */
    static deleteOrganization(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/orgs/{id}",
        });
    }
    /**
     * Get organization
     * Get organization information by organization ID
     */
    static getOrganization(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/orgs/{id}",
        });
    }
    /**
     * Update organization
     * Update the specified organization
     */
    static updateOrganization(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/orgs/{id}",
        });
    }
}
exports.OrganizationService = OrganizationService;
class ProjectService {
    /**
     * List projects
     * List all or a subset of the projects
     */
    static listProject(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/projects",
        });
    }
    /**
     * Create project
     * Create a new project
     */
    static createProject(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/projects",
        });
    }
    /**
     * Delete project
     * Delete specified project by ID
     */
    static deleteProject(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/projects/{project_id}",
        });
    }
    /**
     * Get project
     * Get project information by project ID
     */
    static getProject(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/projects/{project_id}",
        });
    }
    /**
     * Update project
     * Update the specified project
     */
    static updateProject(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/projects/{project_id}",
        });
    }
}
exports.ProjectService = ProjectService;
class ResourceService {
    /**
     * List resource
     * List resource information
     */
    static listResource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/resources",
        });
    }
    /**
     * Get resource
     * Get resource information by resource ID
     */
    static getResource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/resources/{id}",
        });
    }
    /**
     * Get resource graph
     * Get resource graph by stack ID
     */
    static getResourceGraph(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/resources/graph",
        });
    }
}
exports.ResourceService = ResourceService;
class RunService {
    /**
     * Get run
     * Get run information by run ID
     */
    static getRun(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/runs/{run_id}",
        });
    }
    /**
     * Get run result
     * Get run result by run ID
     */
    static getRunResult(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/runs/{run_id}/result",
        });
    }
}
exports.RunService = RunService;
class SourceService {
    /**
     * List source
     * List source information by source ID
     */
    static listSource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/sources",
        });
    }
    /**
     * Create source
     * Create a new source
     */
    static createSource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/sources",
        });
    }
    /**
     * Delete source
     * Delete specified source by ID
     */
    static deleteSource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/sources/{id}",
        });
    }
    /**
     * Get source
     * Get source information by source ID
     */
    static getSource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/sources/{id}",
        });
    }
    /**
     * Update source
     * Update the specified source
     */
    static updateSource(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/sources/{id}",
        });
    }
}
exports.SourceService = SourceService;
class StackService {
    /**
     * List runs
     * List all runs
     */
    static listRun(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/runs",
        });
    }
    /**
     * List stacks
     * List all stacks
     */
    static listStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/stacks",
        });
    }
    /**
     * Create stack
     * Create a new stack
     */
    static createStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks",
        });
    }
    /**
     * Delete stack
     * Delete specified stack by ID
     */
    static deleteStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/stacks/{stack_id}",
        });
    }
    /**
     * Get stack
     * Get stack information by stack ID
     */
    static getStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/stacks/{stack_id}",
        });
    }
    /**
     * Update stack
     * Update the specified stack
     */
    static updateStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/stacks/{stack_id}",
        });
    }
    /**
     * Apply stack
     * Apply stack information by stack ID
     */
    static applyStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/apply",
        });
    }
    /**
     * Asynchronously apply stack
     * Start a run and asynchronously apply stack changes by stack ID
     */
    static applyStackAsync(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/apply/async",
        });
    }
    /**
     * Destroy stack
     * Destroy stack information by stack ID
     */
    static destroyStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/destroy",
        });
    }
    /**
     * Asynchronously destroy stack
     * Start a run and asynchronously destroy stack resources by stack ID
     */
    static destroyStackAsync(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/destroy/async",
        });
    }
    /**
     * Generate stack
     * Generate stack information by stack ID
     */
    static generateStack(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/generate",
        });
    }
    /**
     * Asynchronously generate stack
     * Start a run and asynchronously generate stack spec by stack ID
     */
    static generateStackAsync(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/generate/async",
        });
    }
    /**
     * Asynchronously preview stack
     * Start a run and asynchronously preview stack changes by stack ID
     */
    static previewStackAsync(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/stacks/{stack_id}/preview",
        });
    }
}
exports.StackService = StackService;
class WorkspaceService {
    /**
     * List workspaces
     * List all workspaces
     */
    static listWorkspace(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/workspaces",
        });
    }
    /**
     * Create workspace
     * Create a new workspace
     */
    static createWorkspace(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/workspaces",
        });
    }
    /**
     * Delete workspace
     * Delete specified workspace by ID
     */
    static deleteWorkspace(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).delete({
            ...options,
            url: "/api/v1/workspaces/{id}",
        });
    }
    /**
     * Get workspace
     * Get workspace information by workspace ID
     */
    static getWorkspace(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/workspaces/{id}",
        });
    }
    /**
     * Update workspace
     * Update the specified workspace
     */
    static updateWorkspace(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/workspaces/{id}",
        });
    }
    /**
     * get workspace configurations
     * Get configurations in the specified workspace
     */
    static getWorkspaceConfigs(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).get({
            ...options,
            url: "/api/v1/workspaces/{id}/configs",
        });
    }
    /**
     * Update workspace configurations
     * Update the configurations in the specified workspace
     */
    static updateWorkspaceConfigs(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).put({
            ...options,
            url: "/api/v1/workspaces/{id}/configs",
        });
    }
    /**
     * Create the module dependencies of the workspace
     * Create the module dependencies in kcl.mod of the specified workspace
     */
    static createWorkspaceModDeps(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/workspaces/{id}/configs/mod-deps",
        });
    }
    /**
     * Validate workspace configurations
     * Validate the configurations in the specified workspace
     */
    static validateWorkspaceConfigs(options) {
        var _a;
        return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : exports.client).post({
            ...options,
            url: "/api/v1/workspaces/configs/validate",
        });
    }
}
exports.WorkspaceService = WorkspaceService;
//# sourceMappingURL=sdk.gen.js.map