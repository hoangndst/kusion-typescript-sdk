// This file is auto-generated by @hey-api/openapi-ts

export const constant_RunStatusSchema = {
  enum: [
    "Scheduling",
    "InProgress",
    "Failed",
    "Succeeded",
    "Cancelled",
    "Queued",
  ],
  type: "string",
  "x-enum-varnames": [
    "RunStatusScheduling",
    "RunStatusInProgress",
    "RunStatusFailed",
    "RunStatusSucceeded",
    "RunStatusCancelled",
    "RunStatusQueued",
  ],
} as const;

export const constant_RunTypeSchema = {
  enum: ["Generate", "Preview", "Apply", "Destroy"],
  type: "string",
  "x-enum-varnames": [
    "RunTypeGenerate",
    "RunTypePreview",
    "RunTypeApply",
    "RunTypeDestroy",
  ],
} as const;

export const constant_SourceProviderTypeSchema = {
  enum: ["git", "git", "github", "oci", "local"],
  type: "string",
  "x-enum-varnames": [
    "DefaultSourceType",
    "SourceProviderTypeGit",
    "SourceProviderTypeGithub",
    "SourceProviderTypeOCI",
    "SourceProviderTypeLocal",
  ],
} as const;

export const constant_StackStateSchema = {
  enum: [
    "UnSynced",
    "Synced",
    "OutOfSync",
    "Creating",
    "Generating",
    "GenerateFailed",
    "Generated",
    "Previewing",
    "PreviewFailed",
    "Previewed",
    "Applying",
    "ApplyFailed",
    "ApplySucceeded",
    "Destroying",
    "DestroyFailed",
    "DestroySucceeded",
  ],
  type: "string",
  "x-enum-varnames": [
    "StackStateUnSynced",
    "StackStateSynced",
    "StackStateOutOfSync",
    "StackStateCreating",
    "StackStateGenerating",
    "StackStateGenerateFailed",
    "StackStateGenerated",
    "StackStatePreviewing",
    "StackStatePreviewFailed",
    "StackStatePreviewed",
    "StackStateApplying",
    "StackStateApplyFailed",
    "StackStateApplySucceeded",
    "StackStateDestroying",
    "StackStateDestroyFailed",
    "StackStateDestroySucceeded",
  ],
} as const;

export const entity_BackendSchema = {
  properties: {
    backendConfig: {
      allOf: [
        {
          $ref: "#/definitions/v1.BackendConfig",
        },
      ],
      description: `// Type is the type of the backend.
Type string \`yaml:"type" json:"type"\`
Backend is the configuration of the backend.`,
    },
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the backend.",
      type: "string",
    },
    description: {
      description:
        "Description is a human-readable description of the backend.",
      type: "string",
    },
    id: {
      description: "ID is the id of the backend.",
      type: "integer",
    },
    name: {
      description: "Name is the name of the backend.",
      type: "string",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the backend.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_ModuleSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the module.",
      type: "string",
    },
    doc: {
      allOf: [
        {
          $ref: "#/definitions/url.URL",
        },
      ],
      description: "Doc is the documentation URL of the module.",
    },
    name: {
      description: "Name is the module name.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the module.",
      items: {
        type: "string",
      },
      type: "array",
    },
    url: {
      allOf: [
        {
          $ref: "#/definitions/url.URL",
        },
      ],
      description: "URL is the module oci artifact registry URL.",
    },
  },
  type: "object",
} as const;

export const entity_OrganizationSchema = {
  properties: {
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the organization.",
      type: "string",
    },
    description: {
      description:
        "Description is a human-readable description of the organization.",
      type: "string",
    },
    displayName: {
      description: "DisplayName is the human-readable display name.",
      type: "string",
    },
    id: {
      description: "ID is the id of the organization.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the organization.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the organization.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the organization.",
      items: {
        type: "string",
      },
      type: "array",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the organization.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_ProjectSchema = {
  properties: {
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the project.",
      type: "string",
    },
    description: {
      description:
        "Description is a human-readable description of the project.",
      type: "string",
    },
    displayName: {
      description: "DisplayName is the human-readable display name.",
      type: "string",
    },
    id: {
      description: "ID is the id of the project.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the project.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the project.",
      type: "string",
    },
    organization: {
      allOf: [
        {
          $ref: "#/definitions/entity.Organization",
        },
      ],
      description:
        "Organization is the configuration source associated with the project.",
    },
    owners: {
      description: "Owners is a list of owners for the project.",
      items: {
        type: "string",
      },
      type: "array",
    },
    path: {
      description:
        "Path is the relative path of the project within the sources.",
      type: "string",
    },
    source: {
      allOf: [
        {
          $ref: "#/definitions/entity.Source",
        },
      ],
      description:
        "Source is the configuration source associated with the project.",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the project.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_ResourceSchema = {
  properties: {
    LastAppliedRevision: {
      description: "LastAppliedRevision is the revision of the last sync.",
      type: "string",
    },
    LastAppliedTimestamp: {
      description: "LastAppliedTimestamp is the timestamp of the last sync.",
      type: "string",
    },
    attributes: {
      additionalProperties: true,
      description: "Attributes is the attributes of the resource.",
      type: "object",
    },
    cloudResourceID: {
      description: "CloudResourceID is the id of the resource in the cloud.",
      type: "string",
    },
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the resource.",
      type: "string",
    },
    dependsOn: {
      description: "DependsOn is the depends on of the resource.",
      items: {
        type: "string",
      },
      type: "array",
    },
    extensions: {
      additionalProperties: true,
      description: "Extensions is the extensions of the resource.",
      type: "object",
    },
    iamResourceID: {
      description: "IAMResourceID is the id of the resource in IAM.",
      type: "string",
    },
    id: {
      description: "ID is the id of the resource.",
      type: "integer",
    },
    kusionResourceID: {
      description: "KusionResourceID is the id of the resource in Kusion.",
      type: "string",
    },
    labels: {
      description: "Labels are custom labels associated with the resource.",
      items: {
        type: "string",
      },
      type: "array",
    },
    owners: {
      description: "Owners is a list of owners for the resource.",
      items: {
        type: "string",
      },
      type: "array",
    },
    provider: {
      description: "Provider is the provider of the resource.",
      type: "string",
    },
    resourceName: {
      description: "ResourceName is the name of the resource.",
      type: "string",
    },
    resourcePlane: {
      description: "ResourcePlane is the plane of the resource.",
      type: "string",
    },
    resourceType: {
      description: "ResourceType is the type of the resource.",
      type: "string",
    },
    stack: {
      allOf: [
        {
          $ref: "#/definitions/entity.Stack",
        },
      ],
      description: "Stack is the stack associated with the resource.",
    },
    status: {
      description: "Status is the status of the resource.",
      type: "string",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the resource.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_ResourceGraphSchema = {
  properties: {
    relations: {
      items: {
        $ref: "#/definitions/entity.ResourceRelation",
      },
      type: "array",
    },
    resources: {
      additionalProperties: {
        $ref: "#/definitions/entity.ResourceInfo",
      },
      type: "object",
    },
    workload: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_ResourceInfoSchema = {
  properties: {
    cloudResourceID: {
      description: "CloudResourceID is the id of the resource in the cloud.",
      type: "string",
    },
    iamResourceID: {
      description: "IAMResourceID is the id of the resource in IAM.",
      type: "string",
    },
    resourceName: {
      description: "ResourceName is the name of the resource.",
      type: "string",
    },
    resourcePlane: {
      description: "ResourcePlane is the plane of the resource.",
      type: "string",
    },
    resourceType: {
      description: "ResourceType is the type of the resource.",
      type: "string",
    },
    status: {
      description: "Status is the status of the resource.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_ResourceRelationSchema = {
  properties: {
    dependencyResource: {
      type: "string",
    },
    dependentResource: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_RunSchema = {
  properties: {
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the run.",
      type: "string",
    },
    id: {
      description: "ID is the id of the run.",
      type: "integer",
    },
    logs: {
      description: "Logs is the logs of the run.",
      type: "string",
    },
    result: {
      description: "Result is the result of the run.",
      type: "string",
    },
    stack: {
      allOf: [
        {
          $ref: "#/definitions/entity.Stack",
        },
      ],
      description: "Stack is the stack of the run.",
    },
    status: {
      allOf: [
        {
          $ref: "#/definitions/constant.RunStatus",
        },
      ],
      description: "Status is the status of the run.",
    },
    trace: {
      description: "Trace is the trace of the run.",
      type: "string",
    },
    type: {
      allOf: [
        {
          $ref: "#/definitions/constant.RunType",
        },
      ],
      description: "RunType is the type of the run provider.",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the run.",
      type: "string",
    },
    workspace: {
      description: "Workspace is the target workspace of the run.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_SourceSchema = {
  properties: {
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the source.",
      type: "string",
    },
    description: {
      description: "Description is a human-readable description of the source.",
      type: "string",
    },
    id: {
      description: "ID is the id of the source.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the source.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the source.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the source.",
      items: {
        type: "string",
      },
      type: "array",
    },
    remote: {
      allOf: [
        {
          $ref: "#/definitions/url.URL",
        },
      ],
      description: "Remote is the source URL, including scheme.",
    },
    sourceProvider: {
      allOf: [
        {
          $ref: "#/definitions/constant.SourceProviderType",
        },
      ],
      description: "SourceProvider is the type of the source provider.",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the source.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_StackSchema = {
  properties: {
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the stack.",
      type: "string",
    },
    description: {
      description: "Description is a human-readable description of the stack.",
      type: "string",
    },
    desiredVersion: {
      description: "Desired is the desired version of stack.",
      type: "string",
    },
    displayName: {
      description: "DisplayName is the human-readable display nams.",
      type: "string",
    },
    id: {
      description: "ID is the id of the stack.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the stack.",
      items: {
        type: "string",
      },
      type: "array",
    },
    lastAppliedRevision: {
      description:
        "LastAppliedRevision is the spec ID of the last apply operation for the stack.",
      type: "string",
    },
    lastAppliedTimestamp: {
      description:
        "LastAppliedTimestamp is the timestamp of the last apply operation for the stack.",
      type: "string",
    },
    lastGeneratedRevision: {
      description:
        "LastGeneratedRevision is the spec ID of the last generate operation for the stack.",
      type: "string",
    },
    lastPreviewedRevision: {
      description:
        "LastPreviewedRevision is the spec ID of the last preview operation for the stack.",
      type: "string",
    },
    name: {
      description: "Name is the name of the stack.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the stack.",
      items: {
        type: "string",
      },
      type: "array",
    },
    path: {
      description: "Path is the relative path of the stack within the sourcs.",
      type: "string",
    },
    project: {
      allOf: [
        {
          $ref: "#/definitions/entity.Project",
        },
      ],
      description: "Project is the project associated with the stack.",
    },
    syncState: {
      allOf: [
        {
          $ref: "#/definitions/constant.StackState",
        },
      ],
      description: "SyncState is the current state of the stack.",
    },
    type: {
      description: "Type is the type of the stack.",
      type: "string",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the stack.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const entity_WorkspaceSchema = {
  properties: {
    backend: {
      allOf: [
        {
          $ref: "#/definitions/entity.Backend",
        },
      ],
      description: "Backend is the corresponding backend for this workspace.",
    },
    creationTimestamp: {
      description:
        "CreationTimestamp is the timestamp of the created for the workspace.",
      type: "string",
    },
    description: {
      description:
        "Description is a human-readable description of the workspace.",
      type: "string",
    },
    displayName: {
      description: "DisplayName is the human-readable display name.",
      type: "string",
    },
    id: {
      description: "ID is the id of the workspace.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the workspace.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the workspace.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the workspace.",
      items: {
        type: "string",
      },
      type: "array",
    },
    updateTimestamp: {
      description:
        "UpdateTimestamp is the timestamp of the updated for the workspace.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_TypeSchema = {
  enum: ["Kubernetes", "Terraform"],
  type: "string",
  "x-enum-varnames": ["Kubernetes", "Terraform"],
} as const;

export const models_ActionTypeSchema = {
  enum: [0, 1, 2, 3, 4],
  type: "integer",
  "x-enum-comments": {
    Create: "creating a new resource.",
    Delete: "deleting an existing resource.",
    UnChanged: "nothing to do.",
    Undefined: "invalidate value",
    Update: "updating an existing resource.",
  },
  "x-enum-varnames": ["Undefined", "UnChanged", "Create", "Update", "Delete"],
} as const;

export const models_ChangeStepSchema = {
  properties: {
    action: {
      allOf: [
        {
          $ref: "#/definitions/models.ActionType",
        },
      ],
      description: "the operation performed by this step",
    },
    from: {
      description: "old data",
    },
    id: {
      description: "the resource id",
      type: "string",
    },
    to: {
      description: "new data",
    },
  },
  type: "object",
} as const;

export const models_ChangesSchema = {
  properties: {
    changeSteps: {
      additionalProperties: {
        $ref: "#/definitions/models.ChangeStep",
      },
      type: "object",
    },
    stepKeys: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const request_CreateBackendRequestSchema = {
  properties: {
    backendConfig: {
      allOf: [
        {
          $ref: "#/definitions/v1.BackendConfig",
        },
      ],
      description: "BackendConfig is the configuration of the backend.",
    },
    description: {
      description:
        "Description is a human-readable description of the backend.",
      type: "string",
    },
    name: {
      description: "Name is the name of the backend.",
      type: "string",
    },
  },
  required: ["name"],
  type: "object",
} as const;

export const request_CreateModuleRequestSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the module.",
      type: "string",
    },
    doc: {
      description: "Doc is the documentation URL of the module.",
      type: "string",
    },
    name: {
      description: "Name is the module name.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the module.",
      items: {
        type: "string",
      },
      type: "array",
    },
    url: {
      description: "URL is the module oci artifact registry URL.",
      type: "string",
    },
  },
  required: ["name", "url"],
  type: "object",
} as const;

export const request_CreateOrganizationRequestSchema = {
  properties: {
    description: {
      description:
        "Description is a human-readable description of the organization.",
      type: "string",
    },
    labels: {
      description: "Labels are custom labels associated with the organization.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the organization.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the organization.",
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  required: ["owners"],
  type: "object",
} as const;

export const request_CreateProjectRequestSchema = {
  properties: {
    description: {
      description:
        "Description is a human-readable description of the project.",
      type: "string",
    },
    domain: {
      description:
        "Domain is the domain of the project, typically serving as the parent folder name for the project.",
      type: "string",
    },
    labels: {
      description: "Labels are custom labels associated with the project.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the project.",
      type: "string",
    },
    organizationID: {
      description:
        "OrganizationID is the organization id associated with the project.",
      type: "integer",
    },
    owners: {
      description: "Owners is a list of owners for the project.",
      items: {
        type: "string",
      },
      type: "array",
    },
    path: {
      description:
        "Path is the relative path of the project within the sources.",
      type: "string",
    },
    sourceID: {
      description:
        "SourceID is the configuration source id associated with the project.",
      type: "integer",
    },
  },
  required: ["domain"],
  type: "object",
} as const;

export const request_CreateSourceRequestSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the source.",
      type: "string",
    },
    labels: {
      description: "Labels are custom labels associated with the source.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the source.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the source.",
      items: {
        type: "string",
      },
      type: "array",
    },
    remote: {
      description: "Remote is the source URL, including scheme.",
      type: "string",
    },
    sourceProvider: {
      description: "SourceProvider is the type of the source provider.",
      type: "string",
    },
  },
  required: ["name", "remote", "sourceProvider"],
  type: "object",
} as const;

export const request_CreateStackRequestSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the stack.",
      type: "string",
    },
    desiredVersion: {
      description: "DesiredVersion is the desired revision of stack.",
      type: "string",
    },
    labels: {
      description: "Labels are custom labels associated with the stack.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the stack.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the stack.",
      items: {
        type: "string",
      },
      type: "array",
    },
    path: {
      description: "Path is the relative path of the stack within the source.",
      type: "string",
    },
    projectID: {
      description:
        "ProjectID is the project id of the stack within the source.",
      type: "integer",
    },
    projectName: {
      description:
        "ProjectName is the project name of the stack within the source.",
      type: "string",
    },
    type: {
      description: "Type is the type of the stack.",
      type: "string",
    },
  },
  required: ["name"],
  type: "object",
} as const;

export const request_CreateWorkspaceRequestSchema = {
  properties: {
    backendID: {
      description:
        "BackendID is the configuration backend id associated with the workspace.",
      type: "integer",
    },
    description: {
      description:
        "Description is a human-readable description of the workspace.",
      type: "string",
    },
    labels: {
      description: "Labels are custom labels associated with the workspace.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the workspace.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the workspace.",
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  required: ["backendID", "name", "owners"],
  type: "object",
} as const;

export const request_StackImportRequestSchema = {
  properties: {
    importedResources: {
      additionalProperties: {
        type: "string",
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const request_UpdateBackendRequestSchema = {
  properties: {
    backendConfig: {
      allOf: [
        {
          $ref: "#/definitions/v1.BackendConfig",
        },
      ],
      description: "BackendConfig is the configuration of the backend.",
    },
    description: {
      description:
        "Description is a human-readable description of the backend.",
      type: "string",
    },
    id: {
      description: "ID is the id of the backend.",
      type: "integer",
    },
    name: {
      description: "Name is the name of the backend.",
      type: "string",
    },
  },
  required: ["id", "name"],
  type: "object",
} as const;

export const request_UpdateModuleRequestSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the module.",
      type: "string",
    },
    doc: {
      description: "Doc is the documentation URL of the module.",
      type: "string",
    },
    name: {
      description: "Name is the module name.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the module.",
      items: {
        type: "string",
      },
      type: "array",
    },
    url: {
      description: "URL is the module oci artifact registry URL.",
      type: "string",
    },
  },
  required: ["name"],
  type: "object",
} as const;

export const request_UpdateOrganizationRequestSchema = {
  properties: {
    description: {
      description:
        "Description is a human-readable description of the organization.",
      type: "string",
    },
    id: {
      description: "ID is the id of the organization.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the organization.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the organization.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the organization.",
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  required: ["id", "owners"],
  type: "object",
} as const;

export const request_UpdateProjectRequestSchema = {
  properties: {
    description: {
      description:
        "Description is a human-readable description of the project.",
      type: "string",
    },
    domain: {
      description:
        "Domain is the domain of the project, typically serving as the parent folder name for the project.",
      type: "string",
    },
    id: {
      description: "ID is the id of the project.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the project.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the project.",
      type: "string",
    },
    organizationID: {
      description:
        "OrganizationID is the organization id associated with the project.",
      type: "integer",
    },
    owners: {
      description: "Owners is a list of owners for the project.",
      items: {
        type: "string",
      },
      type: "array",
    },
    path: {
      description:
        "Path is the relative path of the project within the sources.",
      type: "string",
    },
    sourceID: {
      description:
        "SourceID is the configuration source id associated with the project.",
      type: "integer",
    },
  },
  required: ["domain", "id"],
  type: "object",
} as const;

export const request_UpdateSourceRequestSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the source.",
      type: "string",
    },
    id: {
      description: "ID is the id of the source.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the source.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the source.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the source.",
      items: {
        type: "string",
      },
      type: "array",
    },
    remote: {
      description: "Remote is the source URL, including scheme.",
      type: "string",
    },
    sourceProvider: {
      description: "SourceProvider is the type of the source provider.",
      type: "string",
    },
  },
  required: ["id", "name", "remote", "sourceProvider"],
  type: "object",
} as const;

export const request_UpdateStackRequestSchema = {
  properties: {
    description: {
      description: "Description is a human-readable description of the stack.",
      type: "string",
    },
    desiredVersion: {
      description: "DesiredVersion is the desired revision of stack.",
      type: "string",
    },
    id: {
      description: "ID is the id of the stack.",
      type: "integer",
    },
    labels: {
      description: "Labels are custom labels associated with the stack.",
      items: {
        type: "string",
      },
      type: "array",
    },
    name: {
      description: "Name is the name of the stack.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the stack.",
      items: {
        type: "string",
      },
      type: "array",
    },
    path: {
      description: "Path is the relative path of the stack within the source.",
      type: "string",
    },
    projectID: {
      description:
        "ProjectID is the project id of the stack within the source.",
      type: "integer",
    },
    projectName: {
      description:
        "ProjectName is the project name of the stack within the source.",
      type: "string",
    },
    type: {
      description: "Type is the type of the stack.",
      type: "string",
    },
  },
  required: ["id", "name"],
  type: "object",
} as const;

export const request_UpdateWorkspaceRequestSchema = {
  properties: {
    backendID: {
      description:
        "BackendID is the configuration backend id associated with the workspace.",
      type: "integer",
    },
    description: {
      description:
        "Description is a human-readable description of the workspace.",
      type: "string",
    },
    id: {
      description: "ID is the id of the workspace.",
      type: "integer",
    },
    labels: {
      additionalProperties: {
        type: "string",
      },
      description: "Labels are custom labels associated with the workspace.",
      type: "object",
    },
    name: {
      description: "Name is the name of the workspace.",
      type: "string",
    },
    owners: {
      description: "Owners is a list of owners for the workspace.",
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  required: ["backendID", "id", "owners"],
  type: "object",
} as const;

export const request_WorkspaceConfigsSchema = {
  properties: {
    context: {
      allOf: [
        {
          $ref: "#/definitions/v1.GenericConfig",
        },
      ],
      description:
        "Context contains workspace-level configurations, such as runtimes, topologies, and metadata, etc.",
    },
    modules: {
      allOf: [
        {
          $ref: "#/definitions/v1.ModuleConfigs",
        },
      ],
      description: "Modules are the configs of a set of modules.",
    },
    secretStore: {
      allOf: [
        {
          $ref: "#/definitions/v1.SecretStore",
        },
      ],
      description:
        "SecretStore represents a secure external location for storing secrets.",
    },
  },
  type: "object",
} as const;

export const url_URLSchema = {
  properties: {
    forceQuery: {
      description: "append a query ('?') even if RawQuery is empty",
      type: "boolean",
    },
    fragment: {
      description: "fragment for references, without '#'",
      type: "string",
    },
    host: {
      description: "host or host:port (see Hostname and Port methods)",
      type: "string",
    },
    omitHost: {
      description: "do not emit empty host (authority)",
      type: "boolean",
    },
    opaque: {
      description: "encoded opaque data",
      type: "string",
    },
    path: {
      description: "path (relative paths may omit leading slash)",
      type: "string",
    },
    rawFragment: {
      description: "encoded fragment hint (see EscapedFragment method)",
      type: "string",
    },
    rawPath: {
      description: "encoded path hint (see EscapedPath method)",
      type: "string",
    },
    rawQuery: {
      description: "encoded query values, without '?'",
      type: "string",
    },
    scheme: {
      type: "string",
    },
    user: {
      allOf: [
        {
          $ref: "#/definitions/url.Userinfo",
        },
      ],
      description: "username and password information",
    },
  },
  type: "object",
} as const;

export const url_UserinfoSchema = {
  type: "object",
} as const;

export const v1_AWSProviderSchema = {
  properties: {
    profile: {
      description: `The profile to be used to interact with AWS Secrets Manager.
If not set, the default profile created with \`aws configure\` will be used.`,
      type: "string",
    },
    region: {
      description: `AWS Region to be used to interact with AWS Secrets Manager.
Examples are us-east-1, us-west-2, etc.`,
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_AlicloudProviderSchema = {
  properties: {
    region: {
      description: `Alicloud Region to be used to interact with Alicloud Secrets Manager.
Examples are cn-beijing, cn-shanghai, etc.`,
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_AzureEnvironmentTypeSchema = {
  enum: ["PublicCloud", "USGovernmentCloud", "ChinaCloud", "GermanCloud"],
  type: "string",
  "x-enum-varnames": [
    "AzureEnvironmentPublicCloud",
    "AzureEnvironmentUSGovernmentCloud",
    "AzureEnvironmentChinaCloud",
    "AzureEnvironmentGermanCloud",
  ],
} as const;

export const v1_AzureKVProviderSchema = {
  properties: {
    environmentType: {
      allOf: [
        {
          $ref: "#/definitions/v1.AzureEnvironmentType",
        },
      ],
      description: `EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure.
By-default it points to the public cloud AAD endpoint, and the following endpoints are available:
PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
Ref: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152`,
    },
    tenantId: {
      description: "TenantID configures the Azure Tenant to send requests to.",
      type: "string",
    },
    vaultUrl: {
      description: "Vault Url from which the secrets to be fetched from.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_BackendConfigSchema = {
  properties: {
    configs: {
      additionalProperties: {},
      description:
        "Configs contains config items of the backend, whose keys differ from different backend types.",
      type: "object",
    },
    type: {
      description:
        "Type is the backend type, supports BackendTypeLocal, BackendTypeOss, BackendTypeS3.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_ConfigsSchema = {
  properties: {
    default: {
      allOf: [
        {
          $ref: "#/definitions/v1.GenericConfig",
        },
      ],
      description: "Default is default block of the module config.",
    },
  },
  type: "object",
} as const;

export const v1_FakeProviderSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/definitions/v1.FakeProviderData",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const v1_FakeProviderDataSchema = {
  properties: {
    key: {
      type: "string",
    },
    value: {
      type: "string",
    },
    valueMap: {
      additionalProperties: {
        type: "string",
      },
      type: "object",
    },
    version: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_GenericConfigSchema = {
  additionalProperties: {},
  type: "object",
} as const;

export const v1_ModuleConfigSchema = {
  properties: {
    configs: {
      allOf: [
        {
          $ref: "#/definitions/v1.Configs",
        },
      ],
      description: "Configs contains all levels of module configs",
    },
    path: {
      description:
        "Path is the path of the module. It can be a local path or a remote URL",
      type: "string",
    },
    version: {
      description: "Version is the version of the module.",
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_ModuleConfigsSchema = {
  additionalProperties: {
    $ref: "#/definitions/v1.ModuleConfig",
  },
  type: "object",
} as const;

export const v1_ModulePatcherConfigSchema = {
  properties: {
    projectSelector: {
      description: "ProjectSelector contains the selected projects.",
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const v1_OnPremisesProviderSchema = {
  properties: {
    attributes: {
      additionalProperties: {
        type: "string",
      },
      description: "attributes of the provider",
      type: "object",
    },
    name: {
      description: "platform name of the provider",
      type: "string",
    },
  },
  type: "object",
} as const;

export const v1_ProviderSpecSchema = {
  properties: {
    alicloud: {
      allOf: [
        {
          $ref: "#/definitions/v1.AlicloudProvider",
        },
      ],
      description:
        "Alicloud configures a store to retrieve secrets from Alicloud Secrets Manager.",
    },
    aws: {
      allOf: [
        {
          $ref: "#/definitions/v1.AWSProvider",
        },
      ],
      description:
        "AWS configures a store to retrieve secrets from AWS Secrets Manager.",
    },
    azure: {
      allOf: [
        {
          $ref: "#/definitions/v1.AzureKVProvider",
        },
      ],
      description:
        "Azure configures a store to retrieve secrets from Azure KeyVault.",
    },
    fake: {
      allOf: [
        {
          $ref: "#/definitions/v1.FakeProvider",
        },
      ],
      description: "Fake configures a store with static key/value pairs",
    },
    onpremises: {
      allOf: [
        {
          $ref: "#/definitions/v1.OnPremisesProvider",
        },
      ],
      description: "Onprem configures a store in on-premises environments",
    },
    vault: {
      allOf: [
        {
          $ref: "#/definitions/v1.VaultProvider",
        },
      ],
      description:
        "Vault configures a store to retrieve secrets from HashiCorp Vault.",
    },
    viettelcloud: {
      allOf: [
        {
          $ref: "#/definitions/v1.ViettelCloudProvider",
        },
      ],
      description:
        "ViettelCloud configures a store to retrieve secrets from ViettelCloud Secrets Manager.",
    },
  },
  type: "object",
} as const;

export const v1_ResourceSchema = {
  properties: {
    attributes: {
      additionalProperties: true,
      description:
        "Attributes represents all specified attributes of this resource",
      type: "object",
    },
    dependsOn: {
      description: "DependsOn contains all resources this resource depends on",
      items: {
        type: "string",
      },
      type: "array",
    },
    extensions: {
      additionalProperties: true,
      description: "Extensions specifies arbitrary metadata of this resource",
      type: "object",
    },
    id: {
      description: `ID is the unique key of this resource.
ApiVersion:Kind:Namespace:Name is an idiomatic way for Kubernetes resources.
providerNamespace:providerName:resourceType:resourceName for Terraform resources`,
      type: "string",
    },
    type: {
      allOf: [
        {
          $ref: "#/definitions/kusionstack_io_kusion_pkg_apis_api_kusion_io_v1.Type",
        },
      ],
      description:
        "Type represents all Context we supported like Kubernetes and Terraform",
    },
  },
  type: "object",
} as const;

export const v1_SecretStoreSchema = {
  properties: {
    provider: {
      $ref: "#/definitions/v1.ProviderSpec",
    },
  },
  type: "object",
} as const;

export const v1_SpecSchema = {
  properties: {
    context: {
      allOf: [
        {
          $ref: "#/definitions/v1.GenericConfig",
        },
      ],
      description:
        "Context contains workspace-level configurations, such as runtimes, topologies, and metadata, etc.",
    },
    resources: {
      description: "Resources is the list of Resource this Spec contains.",
      items: {
        $ref: "#/definitions/v1.Resource",
      },
      type: "array",
    },
    secretStore: {
      allOf: [
        {
          $ref: "#/definitions/v1.SecretStore",
        },
      ],
      description:
        "SecretSore represents a external secret store location for storing secrets.",
    },
  },
  type: "object",
} as const;

export const v1_VaultKVStoreVersionSchema = {
  enum: ["v1", "v2"],
  type: "string",
  "x-enum-varnames": ["VaultKVStoreV1", "VaultKVStoreV2"],
} as const;

export const v1_VaultProviderSchema = {
  properties: {
    path: {
      description:
        'Path is the mount path of the Vault KV backend endpoint, e.g: "secret".',
      type: "string",
    },
    server: {
      description:
        'Server is the target Vault server address to connect, e.g: "https://vault.example.com:8200".',
      type: "string",
    },
    version: {
      allOf: [
        {
          $ref: "#/definitions/v1.VaultKVStoreVersion",
        },
      ],
      description: `Version is the Vault KV secret engine version. Version can be either "v1" or
"v2", defaults to "v2".`,
    },
  },
  type: "object",
} as const;

export const v1_ViettelCloudProviderSchema = {
  properties: {
    cmpURL: {
      description: `ViettelCloud CMP URL to be used to interact with ViettelCloud Secrets Manager.
Examples are https://console.viettelcloud.vn/api/`,
      type: "string",
    },
    projectID: {
      description:
        "ProjectID to be used to interact with ViettelCloud Secrets Manager.",
      type: "string",
    },
  },
  type: "object",
} as const;
